apiVersion: v1
kind: Namespace
metadata:
  name: otel-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: standalone-collector
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/version: 0.120.0
  name: otel-collector
  namespace: otel-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
  name: opentelemetry-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: standalone-collector
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/version: 0.120.0
  name: otel-collector
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: standalone-collector
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/version: 0.120.0
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
- kind: ServiceAccount
  name: otel-collector
  namespace: otel-demo
---
apiVersion: v1
data:
  demo.flagd.json: |
    {
      "$schema": "https://flagd.dev/schema/v0/flags.json",
      "flags": {
        "productCatalogFailure": {
          "description": "Fail product catalog service on a specific product",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "recommendationCacheFailure": {
          "description": "Fail recommendation service cache",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adManualGc": {
          "description": "Triggers full manual garbage collections in the ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adHighCpu": {
          "description": "Triggers high cpu load in the ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adFailure": {
          "description": "Fail ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "kafkaQueueProblems": {
          "description": "Overloads Kafka queue while simultaneously introducing a consumer side delay leading to a lag spike",
          "state": "ENABLED",
          "variants": {
            "on": 100,
            "off": 0
          },
          "defaultVariant": "off"
        },
        "cartFailure": {
          "description": "Fail cart service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "paymentFailure": {
          "description": "Fail payment service charge requests n%",
          "state": "ENABLED",
          "variants": {
            "100%": 1,
            "90%": 0.95,
            "75%": 0.75,
            "50%": 0.5,
            "25%": 0.25,
            "10%": 0.1,
            "off": 0
          },
          "defaultVariant": "off"
        },
        "paymentUnreachable": {
          "description": "Payment service is unavailable",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "loadGeneratorFloodHomepage": {
          "description": "Flood the frontend with a large amount of requests.",
          "state": "ENABLED",
          "variants": {
            "on": 100,
            "off": 0
          },
          "defaultVariant": "off"
        },
        "imageSlowLoad": {
          "description": "slow loading images in the frontend",
          "state": "ENABLED",
          "variants": {
            "10sec": 10000,
            "5sec": 5000,
            "off": 0
          },
          "defaultVariant": "off"
        }
      }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
  name: flagd-config
  namespace: otel-demo
---
apiVersion: v1
data:
  relay: |
    connectors:
      spanmetrics: {}
    exporters:
      debug: {}
      otlp:
        endpoint: ${env:OTEL_ADDRESS}
        headers:
          Authorization: Bearer ${env:SW_APM_SERVICE_TOKEN}
        retry_on_failure:
          enabled: true
          initial_interval: 10s
          max_elapsed_time: 300s
          max_interval: 30s
        sending_queue:
          enabled: true
          num_consumers: 10
          queue_size: 1000
        timeout: 15s
        tls:
          insecure: false
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
        - action: insert
          from_attribute: k8s.pod.uid
          key: service.instance.id
      transform:
        error_mode: ignore
        trace_statements:
        - context: span
          statements:
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
    receivers:
      httpcheck/frontend-proxy:
        targets:
        - endpoint: http://frontend-proxy:8080
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      redis:
        collection_interval: 10s
        endpoint: valkey-cart:6379
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          - resource
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - otlp
          - debug
          processors:
          - memory_limiter
          - resource
          - batch
          receivers:
          - httpcheck/frontend-proxy
          - redis
          - otlp
          - spanmetrics
        traces:
          exporters:
          - otlp
          - debug
          - spanmetrics
          processors:
          - memory_limiter
          - resource
          - transform
          - batch
          receivers:
          - otlp
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
          level: detailed
          readers:
          - periodic:
              exporter:
                otlp:
                  endpoint: otel-collector:4318
                  protocol: grpc
              interval: 10000
              timeout: 5000
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: standalone-collector
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/version: 0.120.0
  name: otel-collector
  namespace: otel-demo
---
apiVersion: v1
data:
  products.json: |
    {
      "products": [
        {
          "id": "OLJCESPC7Z",
          "name": "National Park Foundation Explorascope",
          "description": "The National Park Foundation’s (NPF) Explorascope 60AZ is a manual alt-azimuth, refractor telescope perfect for celestial viewing on the go. The NPF Explorascope 60 can view the planets, moon, star clusters and brighter deep sky objects like the Orion Nebula and Andromeda Galaxy.",
          "picture": "NationalParkFoundationExplorascope.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 101,
            "nanos": 960000000
          },
          "categories": [
            "telescopes"
          ]
        },
        {
          "id": "66VCHSJNUP",
          "name": "Starsense Explorer Refractor Telescope",
          "description": "The first telescope that uses your smartphone to analyze the night sky and calculate its position in real time. StarSense Explorer is ideal for beginners thanks to the app’s user-friendly interface and detailed tutorials. It’s like having your own personal tour guide of the night sky",
          "picture": "StarsenseExplorer.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 349,
            "nanos": 950000000
          },
          "categories": [
            "telescopes"
          ]
        },
        {
          "id": "1YMWWN1N4O",
          "name": "Eclipsmart Travel Refractor Telescope",
          "description": "Dedicated white-light solar scope for the observer on the go. The 50mm refracting solar scope uses Solar Safe, ISO compliant, full-aperture glass filter material to ensure the safest view of solar events.  The kit comes complete with everything you need, including the dedicated travel solar scope, a Solar Safe finderscope, tripod, a high quality 20mm (18x) Kellner eyepiece and a nylon backpack to carry everything in.  This Travel Solar Scope makes it easy to share the Sun as well as partial and total solar eclipses with the whole family and offers much higher magnifications than you would otherwise get using handheld solar viewers or binoculars.",
          "picture": "EclipsmartTravelRefractorTelescope.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 129,
            "nanos": 950000000
          },
          "categories": [
            "telescopes",
            "travel"
          ]
        },
        {
          "id": "L9ECAV7KIM",
          "name": "Lens Cleaning Kit",
          "description": "Wipe away dust, dirt, fingerprints and other particles on your lenses to see clearly with the Lens Cleaning Kit. This cleaning kit works on all glass and optical surfaces, including telescopes, binoculars, spotting scopes, monoculars, microscopes, and even your camera lenses, computer screens, and mobile devices.  The kit comes complete with a retractable lens brush to remove dust particles and dirt and two options to clean smudges and fingerprints off of your optics, pre-moistened lens wipes and a bottled lens cleaning fluid with soft cloth.",
          "picture": "LensCleaningKit.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 21,
            "nanos": 950000000
          },
          "categories": [
            "accessories"
          ]
        },
        {
          "id": "2ZYFJ3GM2N",
          "name": "Roof Binoculars",
          "description": "This versatile, all-around binocular is a great choice for the trail, the stadium, the arena, or just about anywhere you want a close-up view of the action without sacrificing brightness or detail. It’s an especially great companion for nature observation and bird watching, with ED glass that helps you spot the subtlest field markings and a close focus of just 6.5 feet.",
          "picture": "RoofBinoculars.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 209,
            "nanos": 950000000
          },
          "categories": [
            "binoculars"
          ]
        },
        {
          "id": "0PUK6V6EV0",
          "name": "Solar System Color Imager",
          "description": "You have your new telescope and have observed Saturn and Jupiter. Now you're ready to take the next step and start imaging them. But where do you begin? The NexImage 10 Solar System Imager is the perfect solution.",
          "picture": "SolarSystemColorImager.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 175,
            "nanos": 0
          },
          "categories": [
            "accessories",
            "telescopes"
          ]
        },
        {
          "id": "LS4PSXUNUM",
          "name": "Red Flashlight",
          "description": "This 3-in-1 device features a 3-mode red flashlight, a hand warmer, and a portable power bank for recharging your personal electronics on the go. Whether you use it to light the way at an astronomy star party, a night walk, or wildlife research, ThermoTorch 3 Astro Red’s rugged, IPX4-rated design will withstand your everyday activities.",
          "picture": "RedFlashlight.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 57,
            "nanos": 80000000
          },
          "categories": [
            "accessories",
            "flashlights"
          ]
        },
        {
          "id": "9SIQT8TOJO",
          "name": "Optical Tube Assembly",
          "description": "Capturing impressive deep-sky astroimages is easier than ever with Rowe-Ackermann Schmidt Astrograph (RASA) V2, the perfect companion to today’s top DSLR or astronomical CCD cameras. This fast, wide-field f/2.2 system allows for shorter exposure times compared to traditional f/10 astroimaging, without sacrificing resolution. Because shorter sub-exposure times are possible, your equatorial mount won’t need to accurately track over extended periods. The short focal length also lessens equatorial tracking demands. In many cases, autoguiding will not be required.",
          "picture": "OpticalTubeAssembly.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 3599,
            "nanos": 0
          },
          "categories": [
            "accessories",
            "telescopes",
            "assembly"
          ]
        },
        {
          "id": "6E92ZMYYFZ",
          "name": "Solar Filter",
          "description": "Enhance your viewing experience with EclipSmart Solar Filter for 8” telescopes. With two Velcro straps and four self-adhesive Velcro pads for added safety, you can be assured that the solar filter cannot be accidentally knocked off and will provide Solar Safe, ISO compliant viewing.",
          "picture": "SolarFilter.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 69,
            "nanos": 950000000
          },
          "categories": [
            "accessories",
            "telescopes"
          ]
        },
        {
          "id": "HQTGWGPNH4",
          "name": "The Comet Book",
          "description": "A 16th-century treatise on comets, created anonymously in Flanders (now northern France) and now held at the Universitätsbibliothek Kassel. Commonly known as The Comet Book (or Kometenbuch in German), its full title translates as “Comets and their General and Particular Meanings, According to Ptolomeé, Albumasar, Haly, Aliquind and other Astrologers”. The image is from https://publicdomainreview.org/collection/the-comet-book, made available by the Universitätsbibliothek Kassel under a CC-BY SA 4.0 license (https://creativecommons.org/licenses/by-sa/4.0/)",
          "picture": "TheCometBook.jpg",
          "priceUsd": {
            "currencyCode": "USD",
            "units": 0,
            "nanos": 990000000
          },
          "categories": [
            "books"
          ]
        }
      ]
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
  name: product-catalog-products
  namespace: otel-demo
---
apiVersion: v1
data:
  OTEL_ADDRESS: otel.collector.na-01.cloud.solarwinds.com:443
  PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ""
  SW_APM_COLLECTOR: apm.collector.na-01.cloud.solarwinds.com
  SWO_RUM_SCRIPT: ""
  SWO_URL: na-01.cloud.solarwinds.com
  UI_EXTERNAL_URL: ""
  UPSTREAM_DISTRO_DISABLED: "true"
kind: ConfigMap
metadata:
  name: swo-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: standalone-collector
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/version: 0.120.0
    component: standalone-collector
  name: otel-collector
  namespace: otel-demo
spec:
  internalTrafficPolicy: Cluster
  ports:
  - appProtocol: grpc
    name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  selector:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    component: standalone-collector
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: ad
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: ad
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: ad
  name: ad
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ad
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: cart
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: cart
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: cart
  name: cart
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: cart
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: checkout
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: checkout
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: checkout
  name: checkout
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: checkout
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: currency
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: currency
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: currency
  name: currency
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: currency
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: email
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: email
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: email
  name: email
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: email
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: flagd
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: flagd
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: flagd
  name: flagd
spec:
  ports:
  - name: rpc
    port: 8013
    targetPort: 8013
  - name: ofrep
    port: 8016
    targetPort: 8016
  - name: tcp-service-0
    port: 4000
    targetPort: 4000
  selector:
    opentelemetry.io/name: flagd
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: frontend
  name: frontend
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: frontend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: frontend-proxy
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: frontend-proxy
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: frontend-proxy
  name: frontend-proxy
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: frontend-proxy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: image-provider
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: image-provider
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: image-provider
  name: image-provider
spec:
  ports:
  - name: tcp-service
    port: 8081
    targetPort: 8081
  selector:
    opentelemetry.io/name: image-provider
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: kafka
  name: kafka
spec:
  ports:
  - name: plaintext
    port: 9092
    targetPort: 9092
  - name: controller
    port: 9093
    targetPort: 9093
  selector:
    opentelemetry.io/name: kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: load-generator
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: load-generator
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: load-generator
  name: load-generator
spec:
  ports:
  - name: tcp-service
    port: 8089
    targetPort: 8089
  selector:
    opentelemetry.io/name: load-generator
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: payment
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: payment
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: payment
  name: payment
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: payment
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: product-catalog
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: product-catalog
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: product-catalog
  name: product-catalog
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: product-catalog
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: quote
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: quote
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: quote
  name: quote
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: quote
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: recommendation
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: recommendation
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: recommendation
  name: recommendation
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: recommendation
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: shipping
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: shipping
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: shipping
  name: shipping
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: shipping
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: valkey-cart
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: valkey-cart
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: valkey-cart
  name: valkey-cart
spec:
  ports:
  - name: valkey-cart
    port: 6379
    targetPort: 6379
  selector:
    opentelemetry.io/name: valkey-cart
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: standalone-collector
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/version: 0.120.0
  name: otel-collector
  namespace: otel-demo
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-collector
      component: standalone-collector
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: a89266db0e62ae4711e3cef2ea43e19dac4d19232eb4bb06b05882a36f128110
        opentelemetry_community_demo: "true"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-collector
        component: standalone-collector
    spec:
      containers:
      - args:
        - --config=/conf/relay.yaml
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: GOMEMLIMIT
          value: 160MiB
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        envFrom:
        - configMapRef:
            name: swo-config
        image: otel/opentelemetry-collector-contrib:0.120.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: opentelemetry-collector
        ports:
        - containerPort: 4317
          name: otlp
          protocol: TCP
        - containerPort: 4318
          name: otlp-http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
          limits:
            memory: 200Mi
        securityContext: {}
        volumeMounts:
        - mountPath: /conf
          name: opentelemetry-collector-configmap
      hostNetwork: false
      securityContext: {}
      serviceAccountName: otel-collector
      volumes:
      - configMap:
          items:
          - key: relay
            path: relay.yaml
          name: otel-collector
        name: opentelemetry-collector-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: accounting
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: accounting
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: accounting
  name: accounting
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: accounting
  template:
    metadata:
      labels:
        app.kubernetes.io/component: accounting
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: accounting
        opentelemetry.io/name: accounting
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-accounting
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_ADDR
          value: kafka:9092
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-telemetry/demo:2.0.2-accounting
        imagePullPolicy: IfNotPresent
        name: accounting
        resources:
          limits:
            memory: 120Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 kafka 9092; do echo waiting for kafka; sleep 2; done;
        image: busybox:latest
        name: wait-for-kafka
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: ad
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: ad
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: ad
  name: ad
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: ad
  template:
    metadata:
      labels:
        app.kubernetes.io/component: ad
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: ad
        opentelemetry.io/name: ad
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: AD_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-ad
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-ad
        imagePullPolicy: IfNotPresent
        name: ad
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 300Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: cart
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: cart
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: cart
  name: cart
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: cart
  template:
    metadata:
      labels:
        app.kubernetes.io/component: cart
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: cart
        opentelemetry.io/name: cart
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CART_PORT
          value: "8080"
        - name: ASPNETCORE_URLS
          value: http://*:$(CART_PORT)
        - name: VALKEY_ADDR
          value: valkey-cart:6379
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_HOME_DOTNET
          value: /usr/src/app/solarwinds
        - name: CORECLR_PROFILER
          value: '{AAAA7777-11FE-4F94-8EDA-312C0EDF4141}'
        - name: CORECLR_PROFILER_PATH
          value: /usr/src/app/solarwinds/solarwinds_apm_profiler.so
        - name: CORECLR_ENABLE_PROFILING
          value: "1"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-cart
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-cart
        imagePullPolicy: IfNotPresent
        name: cart
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 160Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 valkey-cart 6379; do echo waiting for valkey-cart; sleep
          2; done;
        image: busybox:latest
        name: wait-for-valkey-cart
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: checkout
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: checkout
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: checkout
  name: checkout
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: checkout
  template:
    metadata:
      labels:
        app.kubernetes.io/component: checkout
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: checkout
        opentelemetry.io/name: checkout
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CHECKOUT_PORT
          value: "8080"
        - name: CART_ADDR
          value: cart:8080
        - name: CURRENCY_ADDR
          value: currency:8080
        - name: EMAIL_ADDR
          value: http://email:8080
        - name: PAYMENT_ADDR
          value: payment:8080
        - name: PRODUCT_CATALOG_ADDR
          value: product-catalog:8080
        - name: SHIPPING_ADDR
          value: shipping:8080
        - name: KAFKA_ADDR
          value: kafka:9092
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-checkout
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-checkout
        imagePullPolicy: IfNotPresent
        name: checkout
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 kafka 9092; do echo waiting for kafka; sleep 2; done;
        image: busybox:latest
        name: wait-for-kafka
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: currency
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: currency
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: currency
  name: currency
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: currency
  template:
    metadata:
      labels:
        app.kubernetes.io/component: currency
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: currency
        opentelemetry.io/name: currency
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-currency
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CURRENCY_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: VERSION
          value: 2.0.2
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-telemetry/demo:2.0.2-currency
        imagePullPolicy: IfNotPresent
        name: currency
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: email
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: email
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: email
  name: email
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: email
  template:
    metadata:
      labels:
        app.kubernetes.io/component: email
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: email
        opentelemetry.io/name: email
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: EMAIL_PORT
          value: "8080"
        - name: APP_ENV
          value: production
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-email
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-email
        imagePullPolicy: IfNotPresent
        name: email
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 100Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: flagd
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: flagd
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: flagd
  name: flagd
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: flagd
  template:
    metadata:
      labels:
        app.kubernetes.io/component: flagd
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: flagd
        opentelemetry.io/name: flagd
    spec:
      containers:
      - command:
        - /flagd-build
        - start
        - --port
        - "8013"
        - --ofrep-port
        - "8016"
        - --uri
        - file:./etc/flagd/demo.flagd.json
        env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-flagd
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: FLAGD_METRICS_EXPORTER
          value: otel
        - name: FLAGD_OTEL_COLLECTOR_URI
          value: $(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-feature/flagd:v0.11.1
        imagePullPolicy: IfNotPresent
        name: flagd
        ports:
        - containerPort: 8013
          name: rpc
        - containerPort: 8016
          name: ofrep
        resources:
          limits:
            memory: 75Mi
        volumeMounts:
        - mountPath: /etc/flagd
          name: config-rw
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-flagd
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: FLAGD_METRICS_EXPORTER
          value: otel
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        image: ghcr.io/open-telemetry/demo:2.0.2-flagd-ui
        imagePullPolicy: IfNotPresent
        name: flagd-ui
        ports:
        - containerPort: 4000
          name: service
        resources:
          limits:
            memory: 100Mi
        volumeMounts:
        - mountPath: /app/data
          name: config-rw
      initContainers:
      - command:
        - sh
        - -c
        - cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json
        image: busybox
        name: init-config
        volumeMounts:
        - mountPath: /config-ro
          name: config-ro
        - mountPath: /config-rw
          name: config-rw
      serviceAccountName: opentelemetry-demo
      volumes:
      - emptyDir: {}
        name: config-rw
      - configMap:
          name: flagd-config
        name: config-ro
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: fraud-detection
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: fraud-detection
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: fraud-detection
  name: fraud-detection
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: fraud-detection
  template:
    metadata:
      labels:
        app.kubernetes.io/component: fraud-detection
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: fraud-detection
        opentelemetry.io/name: fraud-detection
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_ADDR
          value: kafka:9092
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-frauddetection
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-fraud-detection
        imagePullPolicy: IfNotPresent
        name: fraud-detection
        resources:
          limits:
            memory: 300Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 kafka 9092; do echo waiting for kafka; sleep 2; done;
        image: busybox:latest
        name: wait-for-kafka
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: frontend
  name: frontend
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: frontend
        opentelemetry.io/name: frontend
    spec:
      containers:
      - env:
        - name: FRONTEND_PORT
          value: "8080"
        - name: FRONTEND_ADDR
          value: :8080
        - name: AD_ADDR
          value: ad:8080
        - name: CART_ADDR
          value: cart:8080
        - name: CHECKOUT_ADDR
          value: checkout:8080
        - name: CURRENCY_ADDR
          value: currency:8080
        - name: PRODUCT_CATALOG_ADDR
          value: product-catalog:8080
        - name: RECOMMENDATION_ADDR
          value: recommendation:8080
        - name: SHIPPING_ADDR
          value: shipping:8080
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: WEB_OTEL_SERVICE_NAME
          value: astronomyshop-frontend-web
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-frontend
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-frontend
        imagePullPolicy: IfNotPresent
        name: frontend
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 250Mi
        securityContext:
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: frontend-proxy
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: frontend-proxy
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: frontend-proxy
  name: frontend-proxy
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: frontend-proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontend-proxy
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: frontend-proxy
        opentelemetry.io/name: frontend-proxy
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-frontendproxy
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: ENVOY_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: FLAGD_UI_HOST
          value: flagd
        - name: FLAGD_UI_PORT
          value: "4000"
        - name: FRONTEND_HOST
          value: frontend
        - name: FRONTEND_PORT
          value: "8080"
        - name: GRAFANA_HOST
          value: grafana
        - name: GRAFANA_PORT
          value: "80"
        - name: IMAGE_PROVIDER_HOST
          value: image-provider
        - name: IMAGE_PROVIDER_PORT
          value: "8081"
        - name: JAEGER_HOST
          value: jaeger-query
        - name: JAEGER_PORT
          value: "16686"
        - name: LOCUST_WEB_HOST
          value: load-generator
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_PORT_HTTP
          value: "4318"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-telemetry/demo:2.0.2-frontend-proxy
        imagePullPolicy: IfNotPresent
        name: frontend-proxy
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 65Mi
        securityContext:
          runAsGroup: 101
          runAsNonRoot: true
          runAsUser: 101
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: image-provider
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: image-provider
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: image-provider
  name: image-provider
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: image-provider
  template:
    metadata:
      labels:
        app.kubernetes.io/component: image-provider
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: image-provider
        opentelemetry.io/name: image-provider
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-imageprovider
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: IMAGE_PROVIDER_PORT
          value: "8081"
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-telemetry/demo:2.0.2-image-provider
        imagePullPolicy: IfNotPresent
        name: image-provider
        ports:
        - containerPort: 8081
          name: service
        resources:
          limits:
            memory: 50Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: kafka
  name: kafka
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: kafka
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kafka
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: kafka
        opentelemetry.io/name: kafka
    spec:
      containers:
      - env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://kafka:9092
        - name: KAFKA_HEAP_OPTS
          value: -Xmx400M -Xms400M
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-kafka
        imagePullPolicy: IfNotPresent
        name: kafka
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9093
          name: controller
        resources:
          limits:
            memory: 600Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: load-generator
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: load-generator
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: load-generator
  name: load-generator
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: load-generator
  template:
    metadata:
      labels:
        app.kubernetes.io/component: load-generator
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: load-generator
        opentelemetry.io/name: load-generator
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-loadgenerator
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: LOCUST_WEB_HOST
          value: 0.0.0.0
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_USERS
          value: "10"
        - name: LOCUST_SPAWN_RATE
          value: "1"
        - name: LOCUST_HOST
          value: $(UI_EXTERNAL_URL)
        - name: LOCUST_HEADLESS
          value: "false"
        - name: LOCUST_AUTOSTART
          value: "true"
        - name: LOCUST_BROWSER_TRAFFIC_ENABLED
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_OFREP_PORT
          value: "8016"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-telemetry/demo:2.0.2-load-generator
        imagePullPolicy: IfNotPresent
        name: load-generator
        ports:
        - containerPort: 8089
          name: service
        resources:
          limits:
            memory: 1500Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: payment
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: payment
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: payment
  name: payment
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: payment
  template:
    metadata:
      labels:
        app.kubernetes.io/component: payment
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: payment
        opentelemetry.io/name: payment
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: PAYMENT_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-payment
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-payment
        imagePullPolicy: IfNotPresent
        name: payment
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 120Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: product-catalog
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: product-catalog
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: product-catalog
  name: product-catalog
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: product-catalog
  template:
    metadata:
      labels:
        app.kubernetes.io/component: product-catalog
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: product-catalog
        opentelemetry.io/name: product-catalog
    spec:
      containers:
      - env:
        - name: PRODUCT_CATALOG_PORT
          value: "8080"
        - name: PRODUCT_CATALOG_RELOAD_INTERVAL
          value: "10"
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-product-catalog
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-product-catalog
        imagePullPolicy: IfNotPresent
        name: product-catalog
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts:
        - mountPath: /usr/src/app/products
          name: product-catalog-products
      serviceAccountName: opentelemetry-demo
      volumes:
      - configMap:
          name: product-catalog-products
        name: product-catalog-products
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: quote
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: quote
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: quote
  name: quote
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: quote
  template:
    metadata:
      labels:
        app.kubernetes.io/component: quote
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: quote
        opentelemetry.io/name: quote
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: QUOTE_PORT
          value: "8080"
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-quote
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-payment
        imagePullPolicy: IfNotPresent
        name: quote
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 40Mi
        securityContext:
          runAsGroup: 33
          runAsNonRoot: true
          runAsUser: 33
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: recommendation
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: recommendation
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: recommendation
  name: recommendation
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: recommendation
  template:
    metadata:
      labels:
        app.kubernetes.io/component: recommendation
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: recommendation
        opentelemetry.io/name: recommendation
    spec:
      containers:
      - env:
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: RECOMMENDATION_PORT
          value: "8080"
        - name: PRODUCT_CATALOG_ADDR
          value: product-catalog:8080
        - name: OTEL_PYTHON_LOG_CORRELATION
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: FLAGD_HOST
          value: flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: SW_APM_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: SW_APM_SERVICE_KEY
          value: $(SW_APM_SERVICE_TOKEN):astronomyshop-recommendation
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-recommendation
        - name: SW_APM_LOG_FILEPATH
          value: /var/tmp/solarwinds.log
        envFrom:
        - configMapRef:
            name: swo-config
        image: public.ecr.aws/solarwinds-online-demos/swo-demo/astronomyshop:2.0.2-recommendation
        imagePullPolicy: IfNotPresent
        name: recommendation
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 500Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: shipping
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: shipping
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: shipping
  name: shipping
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: shipping
  template:
    metadata:
      labels:
        app.kubernetes.io/component: shipping
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: shipping
        opentelemetry.io/name: shipping
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          value: astronomyshop-shipping
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: SHIPPING_PORT
          value: "8080"
        - name: QUOTE_ADDR
          value: http://quote:8080
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        - name: OTEL_SDK_DISABLED
          value: $(UPSTREAM_DISTRO_DISABLED)
        envFrom:
        - configMapRef:
            name: swo-config
        image: ghcr.io/open-telemetry/demo:2.0.2-shipping
        imagePullPolicy: IfNotPresent
        name: shipping
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      serviceAccountName: opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: valkey-cart
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: valkey-cart
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 2.0.2
    opentelemetry.io/name: valkey-cart
  name: valkey-cart
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      opentelemetry.io/name: valkey-cart
  template:
    metadata:
      labels:
        app.kubernetes.io/component: valkey-cart
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: valkey-cart
        opentelemetry.io/name: valkey-cart
    spec:
      containers:
      - env:
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_COLLECTOR_NAME
          value: otel-collector
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=2.0.2
        image: valkey/valkey:7.2-alpine
        imagePullPolicy: IfNotPresent
        name: valkey-cart
        ports:
        - containerPort: 6379
          name: valkey-cart
        resources:
          limits:
            memory: 20Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts: null
      - env:
        - name: UAMS_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: swo-apm
              optional: false
        - name: UAMS_CLIENT_ID_OVERRIDE_SOURCE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: swo-config
        image: solarwinds/swo-agent:latest
        name: uamsclient-sidecar
        volumeMounts:
        - mountPath: /uamsclient/workdir
          name: uamsclient-workdir
      serviceAccountName: opentelemetry-demo
  volumeClaimTemplates:
  - metadata:
      name: uamsclient-workdir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
